// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// === MODEL USER YANG DIPERBARUI ==================================
// =================================================================
model User {
  id                     Int       @id @default(autoincrement())
  namaPerusahaan         String
  email                  String    @unique
  password               String    @db.Text // Disimpan sebagai hash yang panjang

  // Kolom untuk enkripsi token bot
  botToken               String    @db.Text // Akan berisi token yang sudah dienkripsi
  botTokenIv             String    // Initialization Vector untuk keamanan enkripsi

  // Kolom untuk verifikasi email
  emailVerificationToken String?   @unique
  emailVerifiedAt        DateTime?

  // Relasi ke model lain
  karyawan               Karyawan[]
  pengaturan             Pengaturan[]
  tipeGaji               TipeGaji[]
}

model Karyawan {
  id           Int       @id @default(autoincrement())
  telegram_id  BigInt    @unique
  nama_lengkap String
  jabatan      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tipeGajiId   Int?
  tipeGaji     TipeGaji? @relation(fields: [tipeGajiId], references: [id])
  absensi      Absensi[]
  userId       Int
  // DIUBAH: Menambahkan onDelete: Cascade agar data karyawan terhapus jika user dihapus
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Absensi {
  id         Int      @id @default(autoincrement())
  tipe       String
  latitude   Float
  longitude  Float
  createdAt  DateTime @default(now())
  karyawanId Int
  // DIUBAH: Menambahkan onDelete: Cascade agar data absensi terhapus jika karyawan dihapus
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id], onDelete: Cascade)
}

model Pengaturan {
  id        Int     @id @default(autoincrement())
  nama      String
  nilai     String
  deskripsi String?
  userId    Int
  // DIUBAH: Menambahkan onDelete: Cascade agar data pengaturan terhapus jika user dihapus
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nama, userId])
}

model TipeGaji {
  id                   Int        @id @default(autoincrement())
  nama                 String
  model_perhitungan    String
  nilai_gaji_dasar     Float?
  potongan_tidak_masuk Float?
  tarif_lembur_per_jam Float?
  aturan_tarif_per_jam String?    @db.Text
  userId               Int
  // DIUBAH: Menambahkan onDelete: Cascade agar data tipe gaji terhapus jika user dihapus
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  karyawan             Karyawan[]
}
